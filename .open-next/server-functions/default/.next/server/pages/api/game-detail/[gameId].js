"use strict";(()=>{var e={};e.id=387,e.ids=[387],e.modules={3480:(e,t,r)=>{e.exports=r(5600)},5600:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6415:(e,t,r)=>{r.r(t),r.d(t,{config:()=>l,default:()=>d,routeModule:()=>m});var a={};r.r(a),r.d(a,{default:()=>i});var n=r(3480),s=r(8667),o=r(6435);async function i(e,t){let r=process.env.RA_API_KEY,a=process.env.RA_USERNAME;if(!r||!a)return console.error("Missing RA_API_KEY or RA_USERNAME in environment variables."),t.status(500).json({error:"Server configuration error: Missing RetroAchievements API credentials."});let{gameId:n}=e.query,s=e.query.targetUser||a;if(!n||isNaN(Number(n)))return t.status(400).json({error:"Missing or invalid gameId."});let o="https://media.retroachievements.org",i=`${o}/Badge/`;try{let e,a=`https://retroachievements.org/API/API_GetGameInfoAndUserProgress.php?y=${r}&u=${s}&g=${n}&a=1`,d=`https://retroachievements.org/API/API_GetGameHashes.php?y=${r}&i=${n}`,[l,m]=await Promise.all([fetch(a),fetch(d)]);if(!l.ok){let e=await l.text();try{let t=JSON.parse(e);throw Error(t.Error||`RetroAchievements detail error: ${e}`)}catch{throw Error(`RetroAchievements detail error (non-JSON): ${e}`)}}let g=l.headers.get("content-type");if(g?.includes("application/json"))e=await l.json();else{let t=await l.text();try{e=JSON.parse(t)}catch{throw Error(`Invalid detail JSON format for gameId ${n}: ${t}`)}}let u={Results:[]};if(m.ok)try{let e=m.headers.get("content-type");if(e?.includes("application/json"))u=await m.json();else{let e=await m.text();u=JSON.parse(e)}}catch(e){console.warn(`Warning: Failed to parse hash data for gameId ${n}`)}else console.warn(`Hash fetch failed for gameId ${n}`);if(!e||0===Object.keys(e).length)return t.status(404).json({error:`Game with ID ${n} not found or no data available.`});let{ID:c,Title:A,ConsoleID:h,ConsoleName:f,ImageIcon:p,ParentGameID:I,...P}=e,v=e=>"string"==typeof e&&e.startsWith("/")?o+e:e,w={GameID:c,Title:A,ConsoleID:h,ConsoleName:f,ImageIcon:v(p),ParentGameID:I,MaxPossible:P.NumAchievements||0,NumAwarded:P.NumAwardedToUser||0,MostRecentAwardedDate:P.MostRecentAwardedDate||null,HighestAwardKind:P.HighestAwardKind||null,HighestAwardDate:P.HighestAwardDate||null},E={...P,ImageTitle:v(P.ImageTitle),ImageIngame:v(P.ImageIngame),ImageBoxArt:v(P.ImageBoxArt)};return E.Achievements&&Object.values(E.Achievements).forEach(e=>{e.BadgeName&&!e.BadgeName.startsWith("http")&&(e.BadgeName=`${i}${e.BadgeName}.png`)}),t.status(200).json({...w,Hashes:u.Results||[],UserProgress:E})}catch(e){return console.error(`Error in game-detail API for gameId ${n}:`,e.message),t.status(500).json({error:"Failed to fetch game details",message:e.message,timestamp:new Date().toISOString()})}}let d=(0,o.M)(a,"default"),l=(0,o.M)(a,"config"),m=new n.PagesAPIRouteModule({definition:{kind:s.A.PAGES_API,page:"/api/game-detail/[gameId]",pathname:"/api/game-detail/[gameId]",bundlePath:"",filename:""},userland:a})},6435:(e,t)=>{Object.defineProperty(t,"M",{enumerable:!0,get:function(){return function e(t,r){return r in t?t[r]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,r)):"function"==typeof t&&"default"===r?t:void 0}}})},8667:(e,t)=>{Object.defineProperty(t,"A",{enumerable:!0,get:function(){return r}});var r=function(e){return e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE",e.IMAGE="IMAGE",e}({})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var r=t(t.s=6415);module.exports=r})();